

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Aug 04 23:14:24 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0088                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001D                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  0081                     	;# 
   328  0085                     	;# 
   329  0086                     	;# 
   330  0087                     	;# 
   331  0088                     	;# 
   332  0089                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  008F                     	;# 
   337  0090                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0093                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0095                     	;# 
   345  0096                     	;# 
   346  0097                     	;# 
   347  0098                     	;# 
   348  0099                     	;# 
   349  009A                     	;# 
   350  009B                     	;# 
   351  009C                     	;# 
   352  009D                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  0105                     	;# 
   356  0107                     	;# 
   357  0108                     	;# 
   358  0109                     	;# 
   359  010C                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0187                     	;# 
   366  0188                     	;# 
   367  0189                     	;# 
   368  018C                     	;# 
   369  018D                     	;# 
   370                           
   371                           	psect	strings
   372  0003                     __pstrings:
   373  0003                     stringtab:
   374  0003                     __stringtab:
   375  0003                     stringcode:	
   376                           ;	String table - string pointers are 1 byte each
   377                           
   378  0003                     stringdir:
   379  0003  3000               	movlw	high stringdir
   380  0004  008A               	movwf	10
   381  0005  0804               	movf	4,w
   382  0006  0A84               	incf	4,f
   383  0007  0782               	addwf	2,f
   384  0008                     __stringbase:
   385  0008  3400               	retlw	0
   386  0009                     __end_of__stringtab:
   387  0009                     _dpowers:
   388  0009  3401               	retlw	1
   389  000A  3400               	retlw	0
   390  000B  340A               	retlw	10
   391  000C  3400               	retlw	0
   392  000D  3464               	retlw	100
   393  000E  3400               	retlw	0
   394  000F  34E8               	retlw	232
   395  0010  3403               	retlw	3
   396  0011  3410               	retlw	16
   397  0012  3427               	retlw	39
   398  0013                     __end_of_dpowers:
   399  0019                     _TXREG	set	25
   400  000D                     _PIR2bits	set	13
   401  0013                     _SSPBUF	set	19
   402  0014                     _SSPCON	set	20
   403  000B                     _INTCONbits	set	11
   404  0018                     _RCSTAbits	set	24
   405  0007                     _PORTC	set	7
   406  0007                     _PORTCbits	set	7
   407  001A                     _RCREG	set	26
   408  000C                     _PIR1bits	set	12
   409  0008                     _PORTD	set	8
   410  0006                     _PORTB	set	6
   411  0005                     _PORTA	set	5
   412  0094                     _SSPSTATbits	set	148
   413  0094                     _SSPSTAT	set	148
   414  009A                     _SPBRGH	set	154
   415  0099                     _SPBRG	set	153
   416  0098                     _TXSTAbits	set	152
   417  0088                     _TRISD	set	136
   418  0087                     _TRISC	set	135
   419  0086                     _TRISB	set	134
   420  0085                     _TRISA	set	133
   421  008F                     _OSCCONbits	set	143
   422  043B                     _TRISC3	set	1083
   423  043D                     _TRISC5	set	1085
   424  010C                     _EEDAT	set	268
   425  010D                     _EEADR	set	269
   426  018D                     _EECON2	set	397
   427  018C                     _EECON1bits	set	396
   428  0187                     _BAUDCTLbits	set	391
   429  0189                     _ANSELH	set	393
   430  0013                     STR_1:
   431  0013  3470               	retlw	112	;'p'
   432  0014  346F               	retlw	111	;'o'
   433  0015  3474               	retlw	116	;'t'
   434  0016  3431               	retlw	49	;'1'
   435  0017  343A               	retlw	58	;':'
   436  0018  3420               	retlw	32	;' '
   437  0019  3425               	retlw	37	;'%'
   438  001A  3464               	retlw	100	;'d'
   439  001B  3420               	retlw	32	;' '
   440  001C  3420               	retlw	32	;' '
   441  001D  3470               	retlw	112	;'p'
   442  001E  346F               	retlw	111	;'o'
   443  001F  3474               	retlw	116	;'t'
   444  0020  3432               	retlw	50	;'2'
   445  0021  343A               	retlw	58	;':'
   446  0022  3420               	retlw	32	;' '
   447  0023  3425               	retlw	37	;'%'
   448  0024  3464               	retlw	100	;'d'
   449  0025  3420               	retlw	32	;' '
   450  0026  3420               	retlw	32	;' '
   451  0027  3470               	retlw	112	;'p'
   452  0028  3463               	retlw	99	;'c'
   453  0029  343A               	retlw	58	;':'
   454  002A  3420               	retlw	32	;' '
   455  002B  3425               	retlw	37	;'%'
   456  002C  3464               	retlw	100	;'d'
   457  002D  3400               	retlw	0
   458                           
   459                           	psect	cinit
   460  07F3                     start_initialization:	
   461                           ; #config settings
   462                           
   463  07F3                     __initialization:
   464                           
   465                           ; Clear objects allocated to BANK0
   466  07F3  1383               	bcf	3,7	;select IRP bank0
   467  07F4  3038               	movlw	low __pbssBANK0
   468  07F5  0084               	movwf	4
   469  07F6  304A               	movlw	low (__pbssBANK0+18)
   470  07F7  120A  118A  2535  120A  118A  	fcall	clear_ram0
   471  07FC                     end_of_initialization:	
   472                           ;End of C runtime variable initialization code
   473                           
   474  07FC                     __end_of__initialization:
   475  07FC  0183               	clrf	3
   476  07FD  120A  118A  2E3F   	ljmp	_main	;jump to C main() function
   477                           
   478                           	psect	bssBANK0
   479  0038                     __pbssBANK0:
   480  0038                     _pc:
   481  0038                     	ds	1
   482  0039                     _dummydata:
   483  0039                     	ds	1
   484  003A                     _term:
   485  003A                     	ds	16
   486                           
   487                           	psect	clrtext
   488  0535                     clear_ram0:	
   489                           ;	Called with FSR containing the base address, and
   490                           ;	W with the last address+1
   491                           
   492  0535  0064               	clrwdt	;clear the watchdog before getting into this loop
   493  0536                     clrloop0:
   494  0536  0180               	clrf	0	;clear RAM location pointed to by FSR
   495  0537  0A84               	incf	4,f	;increment pointer
   496  0538  0604               	xorwf	4,w	;XOR with final address
   497  0539  1903               	btfsc	3,2	;have we reached the end yet?
   498  053A  3400               	retlw	0	;all done for this memory range, return
   499  053B  0604               	xorwf	4,w	;XOR again to restore value
   500  053C  2D36               	goto	clrloop0	;do the next byte
   501                           
   502                           	psect	cstackCOMMON
   503  0070                     __pcstackCOMMON:
   504  0070                     ?_setup:
   505  0070                     ?_enviocadena:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_spiWrite:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0070                     ??_spiWrite:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_spiRead:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ??_spiRead:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ?_spiInit:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_main:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_spiReceiveWait:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ??_spiReceiveWait:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_enviocaracter:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ??_enviocaracter:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?___lwdiv:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     spiInit@sDataSample:	
   542                           ; 2 bytes @ 0x0
   543                           
   544  0070                     spiWrite@dat:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     enviocaracter@a:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ___lwdiv@divisor:	
   551                           ; 1 bytes @ 0x0
   552                           
   553                           
   554                           ; 2 bytes @ 0x0
   555  0070                     	ds	1
   556  0071                     ??_enviocadena:
   557  0071                     spiInit@sClockIdle:	
   558                           ; 1 bytes @ 0x1
   559                           
   560                           
   561                           ; 1 bytes @ 0x1
   562  0071                     	ds	1
   563  0072                     spiInit@sTransmitEdge:
   564  0072                     enviocadena@cadena:	
   565                           ; 1 bytes @ 0x2
   566                           
   567  0072                     ___lwdiv@dividend:	
   568                           ; 1 bytes @ 0x2
   569                           
   570                           
   571                           ; 2 bytes @ 0x2
   572  0072                     	ds	1
   573  0073                     ??_spiInit:
   574  0073                     spiInit@sType:	
   575                           ; 1 bytes @ 0x3
   576                           
   577                           
   578                           ; 1 bytes @ 0x3
   579  0073                     	ds	1
   580  0074                     ??_setup:
   581  0074                     ??___lwdiv:	
   582                           ; 1 bytes @ 0x4
   583                           
   584                           
   585                           ; 1 bytes @ 0x4
   586  0074                     	ds	1
   587  0075                     ___lwdiv@quotient:
   588                           
   589                           ; 2 bytes @ 0x5
   590  0075                     	ds	2
   591  0077                     ___lwdiv@counter:
   592                           
   593                           ; 1 bytes @ 0x7
   594  0077                     	ds	1
   595  0078                     ?___lwmod:
   596  0078                     ___lwmod@divisor:	
   597                           ; 2 bytes @ 0x8
   598                           
   599                           
   600                           ; 2 bytes @ 0x8
   601  0078                     	ds	2
   602  007A                     ___lwmod@dividend:
   603                           
   604                           ; 2 bytes @ 0xA
   605  007A                     	ds	2
   606  007C                     ??___lwmod:
   607                           
   608                           ; 1 bytes @ 0xC
   609  007C                     	ds	1
   610  007D                     ___lwmod@counter:
   611                           
   612                           ; 1 bytes @ 0xD
   613  007D                     	ds	1
   614                           
   615                           	psect	cstackBANK0
   616  0020                     __pcstackBANK0:
   617  0020                     ?_sprintf:
   618  0020                     sprintf@f:	
   619                           ; 2 bytes @ 0x0
   620                           
   621                           
   622                           ; 1 bytes @ 0x0
   623  0020                     	ds	7
   624  0027                     ??_sprintf:
   625                           
   626                           ; 1 bytes @ 0x7
   627  0027                     	ds	3
   628  002A                     sprintf@ap:
   629                           
   630                           ; 1 bytes @ 0xA
   631  002A                     	ds	1
   632  002B                     sprintf@flag:
   633                           
   634                           ; 1 bytes @ 0xB
   635  002B                     	ds	1
   636  002C                     sprintf@prec:
   637                           
   638                           ; 1 bytes @ 0xC
   639  002C                     	ds	1
   640  002D                     sprintf@val:
   641                           
   642                           ; 2 bytes @ 0xD
   643  002D                     	ds	2
   644  002F                     sprintf@sp:
   645                           
   646                           ; 1 bytes @ 0xF
   647  002F                     	ds	1
   648  0030                     sprintf@c:
   649                           
   650                           ; 1 bytes @ 0x10
   651  0030                     	ds	1
   652  0031                     ??_main:
   653                           
   654                           ; 1 bytes @ 0x11
   655  0031                     	ds	7
   656                           
   657                           	psect	maintext
   658  063F                     __pmaintext:	
   659 ;;
   660 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   661 ;;
   662 ;; *************** function _main *****************
   663 ;; Defined at:
   664 ;;		line 53 in file "lab3master.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : B00/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   678 ;;      Params:         0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0
   680 ;;      Temps:          0       7       0       0       0
   681 ;;      Totals:         0       7       0       0       0
   682 ;;Total ram usage:        7 bytes
   683 ;; Hardware stack levels required when called:    2
   684 ;; This function calls:
   685 ;;		_enviocadena
   686 ;;		_setup
   687 ;;		_spiRead
   688 ;;		_spiWrite
   689 ;;		_sprintf
   690 ;; This function is called by:
   691 ;;		Startup code after reset
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           
   696                           ;psect for function _main
   697  063F                     _main:
   698  063F                     l1279:	
   699                           ;incstack = 0
   700                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   701                           
   702                           
   703                           ;lab3master.c: 54:     setup();
   704  063F  120A  118A  258B  120A  118A  	fcall	_setup
   705  0644                     l1281:
   706                           
   707                           ;lab3master.c: 59:         PORTA = pc;
   708  0644  1283               	bcf	3,5	;RP0=0, select bank0
   709  0645  1303               	bcf	3,6	;RP1=0, select bank0
   710  0646  0838               	movf	_pc,w
   711  0647  0085               	movwf	5	;volatile
   712  0648                     l1283:
   713                           
   714                           ;lab3master.c: 60:         sprintf(term, "pot1: %d  pot2: %d  pc: %d", PORTB, PORTD, pc)
      +                          ;
   715  0648  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   716  0649  00B1               	movwf	??_main
   717  064A  0831               	movf	??_main,w
   718  064B  00A0               	movwf	sprintf@f
   719  064C  0806               	movf	6,w	;volatile
   720  064D  00B2               	movwf	??_main+1
   721  064E  01B3               	clrf	??_main+2
   722  064F  0832               	movf	??_main+1,w
   723  0650  00A1               	movwf	?_sprintf+1
   724  0651  0833               	movf	??_main+2,w
   725  0652  00A2               	movwf	?_sprintf+2
   726  0653  0808               	movf	8,w	;volatile
   727  0654  00B4               	movwf	??_main+3
   728  0655  01B5               	clrf	??_main+4
   729  0656  0834               	movf	??_main+3,w
   730  0657  00A3               	movwf	?_sprintf+3
   731  0658  0835               	movf	??_main+4,w
   732  0659  00A4               	movwf	?_sprintf+4
   733  065A  0838               	movf	_pc,w
   734  065B  00B6               	movwf	??_main+5
   735  065C  01B7               	clrf	??_main+6
   736  065D  0836               	movf	??_main+5,w
   737  065E  00A5               	movwf	?_sprintf+5
   738  065F  0837               	movf	??_main+6,w
   739  0660  00A6               	movwf	?_sprintf+6
   740  0661  303A               	movlw	(low (_term| 0))& (0+255)
   741  0662  120A  118A  270B  120A  118A  	fcall	_sprintf
   742  0667                     l1285:
   743                           
   744                           ;lab3master.c: 61:         enviocadena(term);
   745  0667  303A               	movlw	(low (_term| 0))& (0+255)
   746  0668  120A  118A  256C  120A  118A  	fcall	_enviocadena
   747  066D                     l1287:
   748                           
   749                           ;lab3master.c: 62:         if (PIR1bits.RCIF == 1) {
   750  066D  1283               	bcf	3,5	;RP0=0, select bank0
   751  066E  1303               	bcf	3,6	;RP1=0, select bank0
   752  066F  1E8C               	btfss	12,5	;volatile
   753  0670  2E72               	goto	u561
   754  0671  2E73               	goto	u560
   755  0672                     u561:
   756  0672  2E8C               	goto	l1299
   757  0673                     u560:
   758  0673  2E7C               	goto	l1297
   759  0674                     l1291:
   760                           
   761                           ;lab3master.c: 65:                             pc++;
   762  0674  3001               	movlw	1
   763  0675  00B1               	movwf	??_main
   764  0676  0831               	movf	??_main,w
   765  0677  07B8               	addwf	_pc,f
   766                           
   767                           ;lab3master.c: 66:                         break;
   768  0678  2E8C               	goto	l1299
   769  0679                     l1293:
   770                           
   771                           ;lab3master.c: 69:                             pc--;
   772  0679  3001               	movlw	1
   773  067A  02B8               	subwf	_pc,f
   774                           
   775                           ;lab3master.c: 70:                         break;
   776  067B  2E8C               	goto	l1299
   777  067C                     l1297:
   778  067C  081A               	movf	26,w	;volatile
   779  067D  00B1               	movwf	??_main
   780  067E  01B2               	clrf	??_main+1
   781                           
   782                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   783                           ; Switch size 1, requested type "simple"
   784                           ; Number of cases is 1, Range of values is 0 to 0
   785                           ; switch strategies available:
   786                           ; Name         Instructions Cycles
   787                           ; simple_byte            4     3 (average)
   788                           ; direct_byte           11     8 (fixed)
   789                           ; jumptable            260     6 (fixed)
   790                           ;	Chosen strategy is simple_byte
   791  067F  0832               	movf	??_main+1,w
   792  0680  3A00               	xorlw	0	; case 0
   793  0681  1903               	skipnz
   794  0682  2E84               	goto	l1367
   795  0683  2E8C               	goto	l1299
   796  0684                     l1367:
   797                           
   798                           ; Switch size 1, requested type "simple"
   799                           ; Number of cases is 2, Range of values is 43 to 45
   800                           ; switch strategies available:
   801                           ; Name         Instructions Cycles
   802                           ; simple_byte            7     4 (average)
   803                           ; direct_byte           20    11 (fixed)
   804                           ; jumptable            263     9 (fixed)
   805                           ;	Chosen strategy is simple_byte
   806  0684  0831               	movf	??_main,w
   807  0685  3A2B               	xorlw	43	; case 43
   808  0686  1903               	skipnz
   809  0687  2E74               	goto	l1291
   810  0688  3A06               	xorlw	6	; case 45
   811  0689  1903               	skipnz
   812  068A  2E79               	goto	l1293
   813  068B  2E8C               	goto	l1299
   814  068C                     l1299:
   815                           
   816                           ;lab3master.c: 73:         if (dummydata == 1){
   817  068C  0339               	decf	_dummydata,w
   818  068D  1D03               	btfss	3,2
   819  068E  2E90               	goto	u571
   820  068F  2E91               	goto	u570
   821  0690                     u571:
   822  0690  2ECC               	goto	l69
   823  0691                     u570:
   824  0691                     l1301:
   825                           
   826                           ;lab3master.c: 74:             PORTCbits.RC2 = 0;
   827  0691  1107               	bcf	7,2	;volatile
   828  0692                     l1303:
   829                           
   830                           ;lab3master.c: 75:             _delay((unsigned long)((1)*(8000000/4000.0)));
   831  0692  3003               	movlw	3
   832  0693  1283               	bcf	3,5	;RP0=0, select bank0
   833  0694  1303               	bcf	3,6	;RP1=0, select bank0
   834  0695  00B2               	movwf	??_main+1
   835  0696  3097               	movlw	151
   836  0697  00B1               	movwf	??_main
   837  0698                     u587:
   838  0698  0BB1               	decfsz	??_main,f
   839  0699  2E98               	goto	u587
   840  069A  0BB2               	decfsz	??_main+1,f
   841  069B  2E98               	goto	u587
   842  069C                     l1305:
   843                           
   844                           ;lab3master.c: 77:             spiWrite(dummydata);
   845  069C  1283               	bcf	3,5	;RP0=0, select bank0
   846  069D  1303               	bcf	3,6	;RP1=0, select bank0
   847  069E  0839               	movf	_dummydata,w
   848  069F  120A  118A  2528  120A  118A  	fcall	_spiWrite
   849  06A4                     l1307:
   850                           
   851                           ;lab3master.c: 78:             PORTB = spiRead();
   852  06A4  120A  118A  253D  120A  118A  	fcall	_spiRead
   853  06A9  1283               	bcf	3,5	;RP0=0, select bank0
   854  06AA  1303               	bcf	3,6	;RP1=0, select bank0
   855  06AB  0086               	movwf	6	;volatile
   856                           
   857                           ;lab3master.c: 80:             _delay((unsigned long)((1)*(8000000/4000.0)));
   858  06AC  3003               	movlw	3
   859  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   860  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   861  06AF  00B2               	movwf	??_main+1
   862  06B0  3097               	movlw	151
   863  06B1  00B1               	movwf	??_main
   864  06B2                     u597:
   865  06B2  0BB1               	decfsz	??_main,f
   866  06B3  2EB2               	goto	u597
   867  06B4  0BB2               	decfsz	??_main+1,f
   868  06B5  2EB2               	goto	u597
   869  06B6                     l1309:
   870                           
   871                           ;lab3master.c: 85:             PORTCbits.RC2 = 1;
   872  06B6  1283               	bcf	3,5	;RP0=0, select bank0
   873  06B7  1303               	bcf	3,6	;RP1=0, select bank0
   874  06B8  1507               	bsf	7,2	;volatile
   875                           
   876                           ;lab3master.c: 87:             _delay((unsigned long)((100)*(8000000/4000.0)));
   877  06B9  3002               	movlw	2
   878  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   879  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   880  06BC  00B3               	movwf	??_main+2
   881  06BD  3004               	movlw	4
   882  06BE  00B2               	movwf	??_main+1
   883  06BF  30B9               	movlw	185
   884  06C0  00B1               	movwf	??_main
   885  06C1                     u607:
   886  06C1  0BB1               	decfsz	??_main,f
   887  06C2  2EC1               	goto	u607
   888  06C3  0BB2               	decfsz	??_main+1,f
   889  06C4  2EC1               	goto	u607
   890  06C5  0BB3               	decfsz	??_main+2,f
   891  06C6  2EC1               	goto	u607
   892  06C7  2EC8               	nop2
   893  06C8                     l1311:
   894                           
   895                           ;lab3master.c: 88:             dummydata = 0;
   896  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   897  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   898  06CA  01B9               	clrf	_dummydata
   899                           
   900                           ;lab3master.c: 89:        }
   901  06CB  2E44               	goto	l1281
   902  06CC                     l69:	
   903                           ;lab3master.c: 90:         else {
   904                           
   905                           
   906                           ;lab3master.c: 91:             PORTCbits.RC2 = 0;
   907  06CC  1107               	bcf	7,2	;volatile
   908  06CD                     l1313:
   909                           
   910                           ;lab3master.c: 92:             _delay((unsigned long)((1)*(8000000/4000.0)));
   911  06CD  3003               	movlw	3
   912  06CE  1283               	bcf	3,5	;RP0=0, select bank0
   913  06CF  1303               	bcf	3,6	;RP1=0, select bank0
   914  06D0  00B2               	movwf	??_main+1
   915  06D1  3097               	movlw	151
   916  06D2  00B1               	movwf	??_main
   917  06D3                     u617:
   918  06D3  0BB1               	decfsz	??_main,f
   919  06D4  2ED3               	goto	u617
   920  06D5  0BB2               	decfsz	??_main+1,f
   921  06D6  2ED3               	goto	u617
   922  06D7                     l1315:
   923                           
   924                           ;lab3master.c: 94:             spiWrite(dummydata);
   925  06D7  1283               	bcf	3,5	;RP0=0, select bank0
   926  06D8  1303               	bcf	3,6	;RP1=0, select bank0
   927  06D9  0839               	movf	_dummydata,w
   928  06DA  120A  118A  2528  120A  118A  	fcall	_spiWrite
   929  06DF                     l1317:
   930                           
   931                           ;lab3master.c: 95:             PORTD = spiRead();
   932  06DF  120A  118A  253D  120A  118A  	fcall	_spiRead
   933  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   934  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   935  06E6  0088               	movwf	8	;volatile
   936                           
   937                           ;lab3master.c: 97:             _delay((unsigned long)((1)*(8000000/4000.0)));
   938  06E7  3003               	movlw	3
   939  06E8  1283               	bcf	3,5	;RP0=0, select bank0
   940  06E9  1303               	bcf	3,6	;RP1=0, select bank0
   941  06EA  00B2               	movwf	??_main+1
   942  06EB  3097               	movlw	151
   943  06EC  00B1               	movwf	??_main
   944  06ED                     u627:
   945  06ED  0BB1               	decfsz	??_main,f
   946  06EE  2EED               	goto	u627
   947  06EF  0BB2               	decfsz	??_main+1,f
   948  06F0  2EED               	goto	u627
   949  06F1                     l1319:
   950                           
   951                           ;lab3master.c: 102:             PORTCbits.RC2 = 1;
   952  06F1  1283               	bcf	3,5	;RP0=0, select bank0
   953  06F2  1303               	bcf	3,6	;RP1=0, select bank0
   954  06F3  1507               	bsf	7,2	;volatile
   955                           
   956                           ;lab3master.c: 104:             _delay((unsigned long)((100)*(8000000/4000.0)));
   957  06F4  3002               	movlw	2
   958  06F5  1283               	bcf	3,5	;RP0=0, select bank0
   959  06F6  1303               	bcf	3,6	;RP1=0, select bank0
   960  06F7  00B3               	movwf	??_main+2
   961  06F8  3004               	movlw	4
   962  06F9  00B2               	movwf	??_main+1
   963  06FA  30B9               	movlw	185
   964  06FB  00B1               	movwf	??_main
   965  06FC                     u637:
   966  06FC  0BB1               	decfsz	??_main,f
   967  06FD  2EFC               	goto	u637
   968  06FE  0BB2               	decfsz	??_main+1,f
   969  06FF  2EFC               	goto	u637
   970  0700  0BB3               	decfsz	??_main+2,f
   971  0701  2EFC               	goto	u637
   972  0702  2F03               	nop2
   973  0703                     l1321:
   974                           
   975                           ;lab3master.c: 105:             dummydata = 1;
   976  0703  1283               	bcf	3,5	;RP0=0, select bank0
   977  0704  1303               	bcf	3,6	;RP1=0, select bank0
   978  0705  01B9               	clrf	_dummydata
   979  0706  0AB9               	incf	_dummydata,f
   980  0707  2E44               	goto	l1281
   981  0708  120A  118A  2800   	ljmp	start
   982  070B                     __end_of_main:
   983                           
   984                           	psect	text1
   985  070B                     __ptext1:	
   986 ;; *************** function _sprintf *****************
   987 ;; Defined at:
   988 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  sp              1    wreg     PTR unsigned char 
   991 ;;		 -> term(16), 
   992 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   993 ;;		 -> STR_1(27), 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  sp              1   15[BANK0 ] PTR unsigned char 
   996 ;;		 -> term(16), 
   997 ;;  tmpval          4    0        struct .
   998 ;;  val             2   13[BANK0 ] unsigned int 
   999 ;;  cp              2    0        PTR const unsigned char 
  1000 ;;  len             2    0        unsigned int 
  1001 ;;  c               1   16[BANK0 ] unsigned char 
  1002 ;;  prec            1   12[BANK0 ] char 
  1003 ;;  flag            1   11[BANK0 ] unsigned char 
  1004 ;;  ap              1   10[BANK0 ] PTR void [1]
  1005 ;;		 -> ?_sprintf(2), 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  2    0[BANK0 ] int 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         0       7       0       0       0
  1016 ;;      Locals:         0       7       0       0       0
  1017 ;;      Temps:          0       3       0       0       0
  1018 ;;      Totals:         0      17       0       0       0
  1019 ;;Total ram usage:       17 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    1
  1022 ;; This function calls:
  1023 ;;		___lwdiv
  1024 ;;		___lwmod
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           
  1031                           ;psect for function _sprintf
  1032  070B                     _sprintf:
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1036                           ;sprintf@sp stored from wreg
  1037  070B  1283               	bcf	3,5	;RP0=0, select bank0
  1038  070C  1303               	bcf	3,6	;RP1=0, select bank0
  1039  070D  00AF               	movwf	sprintf@sp
  1040  070E                     l1199:
  1041                           
  1042                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1043  070E  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1044  070F  00A7               	movwf	??_sprintf
  1045  0710  0827               	movf	??_sprintf,w
  1046  0711  00AA               	movwf	sprintf@ap
  1047                           
  1048                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1049  0712  2FDC               	goto	l1251
  1050  0713                     l1201:
  1051                           
  1052                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1053  0713  3025               	movlw	37
  1054  0714  0630               	xorwf	sprintf@c,w
  1055  0715  1903               	btfsc	3,2
  1056  0716  2F18               	goto	u471
  1057  0717  2F19               	goto	u470
  1058  0718                     u471:
  1059  0718  2F25               	goto	l1207
  1060  0719                     u470:
  1061  0719                     l1203:
  1062                           
  1063                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1064  0719  0830               	movf	sprintf@c,w
  1065  071A  00A7               	movwf	??_sprintf
  1066  071B  082F               	movf	sprintf@sp,w
  1067  071C  0084               	movwf	4
  1068  071D  0827               	movf	??_sprintf,w
  1069  071E  1383               	bcf	3,7	;select IRP bank0
  1070  071F  0080               	movwf	0
  1071  0720                     l1205:
  1072  0720  3001               	movlw	1
  1073  0721  00A7               	movwf	??_sprintf
  1074  0722  0827               	movf	??_sprintf,w
  1075  0723  07AF               	addwf	sprintf@sp,f
  1076                           
  1077                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1078  0724  2FDC               	goto	l1251
  1079  0725                     l1207:
  1080                           
  1081                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1082  0725  01AB               	clrf	sprintf@flag
  1083  0726                     l1211:	
  1084                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1085                           
  1086  0726  3001               	movlw	1
  1087  0727  07A0               	addwf	sprintf@f,f
  1088  0728  30FF               	movlw	-1
  1089  0729  0720               	addwf	sprintf@f,w
  1090  072A  0084               	movwf	4
  1091  072B  120A  118A  2003  120A  118A  	fcall	stringdir
  1092  0730  00B0               	movwf	sprintf@c
  1093  0731  00A7               	movwf	??_sprintf
  1094  0732  01A8               	clrf	??_sprintf+1
  1095                           
  1096                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1097                           ; Switch size 1, requested type "simple"
  1098                           ; Number of cases is 1, Range of values is 0 to 0
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; simple_byte            4     3 (average)
  1102                           ; direct_byte           11     8 (fixed)
  1103                           ; jumptable            260     6 (fixed)
  1104                           ;	Chosen strategy is simple_byte
  1105  0733  0828               	movf	??_sprintf+1,w
  1106  0734  3A00               	xorlw	0	; case 0
  1107  0735  1903               	skipnz
  1108  0736  2F38               	goto	l1369
  1109  0737  2FDC               	goto	l1251
  1110  0738                     l1369:
  1111                           
  1112                           ; Switch size 1, requested type "simple"
  1113                           ; Number of cases is 3, Range of values is 0 to 105
  1114                           ; switch strategies available:
  1115                           ; Name         Instructions Cycles
  1116                           ; simple_byte           10     6 (average)
  1117                           ; jumptable            260     6 (fixed)
  1118                           ;	Chosen strategy is simple_byte
  1119  0738  0827               	movf	??_sprintf,w
  1120  0739  3A00               	xorlw	0	; case 0
  1121  073A  1903               	skipnz
  1122  073B  2FEE               	goto	l1253
  1123  073C  3A64               	xorlw	100	; case 100
  1124  073D  1903               	skipnz
  1125  073E  2F43               	goto	l1213
  1126  073F  3A0D               	xorlw	13	; case 105
  1127  0740  1903               	skipnz
  1128  0741  2F43               	goto	l1213
  1129  0742  2FDC               	goto	l1251
  1130  0743                     l1213:
  1131                           
  1132                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1133  0743  082A               	movf	sprintf@ap,w
  1134  0744  0084               	movwf	4
  1135  0745  1383               	bcf	3,7	;select IRP bank0
  1136  0746  0800               	movf	0,w
  1137  0747  00AD               	movwf	sprintf@val
  1138  0748  0A84               	incf	4,f
  1139  0749  0800               	movf	0,w
  1140  074A  00AE               	movwf	sprintf@val+1
  1141  074B                     l1215:
  1142  074B  3002               	movlw	2
  1143  074C  00A7               	movwf	??_sprintf
  1144  074D  0827               	movf	??_sprintf,w
  1145  074E  07AA               	addwf	sprintf@ap,f
  1146  074F                     l1217:
  1147                           
  1148                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1149  074F  1FAE               	btfss	sprintf@val+1,7
  1150  0750  2F52               	goto	u481
  1151  0751  2F53               	goto	u480
  1152  0752                     u481:
  1153  0752  2F5C               	goto	l1223
  1154  0753                     u480:
  1155  0753                     l1219:
  1156                           
  1157                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1158  0753  3003               	movlw	3
  1159  0754  00A7               	movwf	??_sprintf
  1160  0755  0827               	movf	??_sprintf,w
  1161  0756  04AB               	iorwf	sprintf@flag,f
  1162  0757                     l1221:
  1163                           
  1164                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1165  0757  09AD               	comf	sprintf@val,f
  1166  0758  09AE               	comf	sprintf@val+1,f
  1167  0759  0AAD               	incf	sprintf@val,f
  1168  075A  1903               	skipnz
  1169  075B  0AAE               	incf	sprintf@val+1,f
  1170  075C                     l1223:
  1171                           
  1172                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1173  075C  01B0               	clrf	sprintf@c
  1174  075D  0AB0               	incf	sprintf@c,f
  1175  075E                     l1229:
  1176                           
  1177                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1178  075E  0830               	movf	sprintf@c,w
  1179  075F  00A7               	movwf	??_sprintf
  1180  0760  0727               	addwf	??_sprintf,w
  1181  0761  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1182  0762  0084               	movwf	4
  1183  0763  120A  118A  2003  120A  118A  	fcall	stringdir
  1184  0768  00A8               	movwf	??_sprintf+1
  1185  0769  120A  118A  2003  120A  118A  	fcall	stringdir
  1186  076E  00A9               	movwf	??_sprintf+2
  1187  076F  0829               	movf	??_sprintf+2,w
  1188  0770  022E               	subwf	sprintf@val+1,w
  1189  0771  1D03               	skipz
  1190  0772  2F75               	goto	u495
  1191  0773  0828               	movf	??_sprintf+1,w
  1192  0774  022D               	subwf	sprintf@val,w
  1193  0775                     u495:
  1194  0775  1803               	skipnc
  1195  0776  2F78               	goto	u491
  1196  0777  2F79               	goto	u490
  1197  0778                     u491:
  1198  0778  2F7A               	goto	l1233
  1199  0779                     u490:
  1200  0779  2F84               	goto	l1235
  1201  077A                     l1233:
  1202  077A  3001               	movlw	1
  1203  077B  00A7               	movwf	??_sprintf
  1204  077C  0827               	movf	??_sprintf,w
  1205  077D  07B0               	addwf	sprintf@c,f
  1206  077E  3005               	movlw	5
  1207  077F  0630               	xorwf	sprintf@c,w
  1208  0780  1D03               	btfss	3,2
  1209  0781  2F83               	goto	u501
  1210  0782  2F84               	goto	u500
  1211  0783                     u501:
  1212  0783  2F5E               	goto	l1229
  1213  0784                     u500:
  1214  0784                     l1235:
  1215                           
  1216                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1217  0784  082B               	movf	sprintf@flag,w
  1218  0785  3903               	andlw	3
  1219  0786  1903               	btfsc	3,2
  1220  0787  2F89               	goto	u511
  1221  0788  2F8A               	goto	u510
  1222  0789                     u511:
  1223  0789  2F95               	goto	l1241
  1224  078A                     u510:
  1225  078A                     l1237:
  1226                           
  1227                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1228  078A  302D               	movlw	45
  1229  078B  00A7               	movwf	??_sprintf
  1230  078C  082F               	movf	sprintf@sp,w
  1231  078D  0084               	movwf	4
  1232  078E  0827               	movf	??_sprintf,w
  1233  078F  1383               	bcf	3,7	;select IRP bank0
  1234  0790  0080               	movwf	0
  1235  0791                     l1239:
  1236  0791  3001               	movlw	1
  1237  0792  00A7               	movwf	??_sprintf
  1238  0793  0827               	movf	??_sprintf,w
  1239  0794  07AF               	addwf	sprintf@sp,f
  1240  0795                     l1241:
  1241                           
  1242                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1243  0795  0830               	movf	sprintf@c,w
  1244  0796  00A7               	movwf	??_sprintf
  1245  0797  0827               	movf	??_sprintf,w
  1246  0798  00AC               	movwf	sprintf@prec
  1247                           
  1248                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1249  0799  2FD3               	goto	l1249
  1250  079A                     l1243:
  1251                           
  1252                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1253  079A  300A               	movlw	10
  1254  079B  00F8               	movwf	___lwmod@divisor
  1255  079C  3000               	movlw	0
  1256  079D  00F9               	movwf	___lwmod@divisor+1
  1257  079E  082C               	movf	sprintf@prec,w
  1258  079F  00A7               	movwf	??_sprintf
  1259  07A0  0727               	addwf	??_sprintf,w
  1260  07A1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1261  07A2  0084               	movwf	4
  1262  07A3  120A  118A  2003  120A  118A  	fcall	stringdir
  1263  07A8  00F0               	movwf	___lwdiv@divisor
  1264  07A9  120A  118A  2003  120A  118A  	fcall	stringdir
  1265  07AE  00F1               	movwf	___lwdiv@divisor+1
  1266  07AF  082E               	movf	sprintf@val+1,w
  1267  07B0  00F3               	movwf	___lwdiv@dividend+1
  1268  07B1  082D               	movf	sprintf@val,w
  1269  07B2  00F2               	movwf	___lwdiv@dividend
  1270  07B3  120A  118A  25FB  120A  118A  	fcall	___lwdiv
  1271  07B8  0871               	movf	?___lwdiv+1,w
  1272  07B9  00FB               	movwf	___lwmod@dividend+1
  1273  07BA  0870               	movf	?___lwdiv,w
  1274  07BB  00FA               	movwf	___lwmod@dividend
  1275  07BC  120A  118A  25C1  120A  118A  	fcall	___lwmod
  1276  07C1  0878               	movf	?___lwmod,w
  1277  07C2  3E30               	addlw	48
  1278  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  1279  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  1280  07C5  00A8               	movwf	??_sprintf+1
  1281  07C6  0828               	movf	??_sprintf+1,w
  1282  07C7  00B0               	movwf	sprintf@c
  1283  07C8                     l1245:
  1284                           
  1285                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1286  07C8  0830               	movf	sprintf@c,w
  1287  07C9  00A7               	movwf	??_sprintf
  1288  07CA  082F               	movf	sprintf@sp,w
  1289  07CB  0084               	movwf	4
  1290  07CC  0827               	movf	??_sprintf,w
  1291  07CD  1383               	bcf	3,7	;select IRP bank0
  1292  07CE  0080               	movwf	0
  1293  07CF                     l1247:
  1294  07CF  3001               	movlw	1
  1295  07D0  00A7               	movwf	??_sprintf
  1296  07D1  0827               	movf	??_sprintf,w
  1297  07D2  07AF               	addwf	sprintf@sp,f
  1298  07D3                     l1249:
  1299                           
  1300                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1301  07D3  30FF               	movlw	255
  1302  07D4  00A7               	movwf	??_sprintf
  1303  07D5  0827               	movf	??_sprintf,w
  1304  07D6  07AC               	addwf	sprintf@prec,f
  1305  07D7  0A2C               	incf	sprintf@prec,w
  1306  07D8  1D03               	btfss	3,2
  1307  07D9  2FDB               	goto	u521
  1308  07DA  2FDC               	goto	u520
  1309  07DB                     u521:
  1310  07DB  2F9A               	goto	l1243
  1311  07DC                     u520:
  1312  07DC                     l1251:
  1313                           
  1314                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1315  07DC  3001               	movlw	1
  1316  07DD  07A0               	addwf	sprintf@f,f
  1317  07DE  30FF               	movlw	-1
  1318  07DF  0720               	addwf	sprintf@f,w
  1319  07E0  0084               	movwf	4
  1320  07E1  120A  118A  2003  120A  118A  	fcall	stringdir
  1321  07E6  00A7               	movwf	??_sprintf
  1322  07E7  0827               	movf	??_sprintf,w
  1323  07E8  00B0               	movwf	sprintf@c
  1324  07E9  0830               	movf	sprintf@c,w
  1325  07EA  1D03               	btfss	3,2
  1326  07EB  2FED               	goto	u531
  1327  07EC  2FEE               	goto	u530
  1328  07ED                     u531:
  1329  07ED  2F13               	goto	l1201
  1330  07EE                     u530:
  1331  07EE                     l1253:
  1332                           
  1333                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1334  07EE  082F               	movf	sprintf@sp,w
  1335  07EF  0084               	movwf	4
  1336  07F0  1383               	bcf	3,7	;select IRP bank0
  1337  07F1  0180               	clrf	0
  1338  07F2                     l261:
  1339  07F2  0008               	return
  1340  07F3                     __end_of_sprintf:
  1341                           
  1342                           	psect	text2
  1343  05C1                     __ptext2:	
  1344 ;; *************** function ___lwmod *****************
  1345 ;; Defined at:
  1346 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  divisor         2    8[COMMON] unsigned int 
  1349 ;;  dividend        2   10[COMMON] unsigned int 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  counter         1   13[COMMON] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2    8[COMMON] unsigned int 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1361 ;;      Params:         4       0       0       0       0
  1362 ;;      Locals:         1       0       0       0       0
  1363 ;;      Temps:          1       0       0       0       0
  1364 ;;      Totals:         6       0       0       0       0
  1365 ;;Total ram usage:        6 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_sprintf
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           
  1375                           ;psect for function ___lwmod
  1376  05C1                     ___lwmod:
  1377  05C1                     l1129:	
  1378                           ;incstack = 0
  1379                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1380                           
  1381  05C1  0878               	movf	___lwmod@divisor,w
  1382  05C2  0479               	iorwf	___lwmod@divisor+1,w
  1383  05C3  1903               	btfsc	3,2
  1384  05C4  2DC6               	goto	u411
  1385  05C5  2DC7               	goto	u410
  1386  05C6                     u411:
  1387  05C6  2DF6               	goto	l1147
  1388  05C7                     u410:
  1389  05C7                     l1131:
  1390  05C7  01FD               	clrf	___lwmod@counter
  1391  05C8  0AFD               	incf	___lwmod@counter,f
  1392  05C9  2DD5               	goto	l1137
  1393  05CA                     l1133:
  1394  05CA  3001               	movlw	1
  1395  05CB                     u425:
  1396  05CB  1003               	clrc
  1397  05CC  0DF8               	rlf	___lwmod@divisor,f
  1398  05CD  0DF9               	rlf	___lwmod@divisor+1,f
  1399  05CE  3EFF               	addlw	-1
  1400  05CF  1D03               	skipz
  1401  05D0  2DCB               	goto	u425
  1402  05D1                     l1135:
  1403  05D1  3001               	movlw	1
  1404  05D2  00FC               	movwf	??___lwmod
  1405  05D3  087C               	movf	??___lwmod,w
  1406  05D4  07FD               	addwf	___lwmod@counter,f
  1407  05D5                     l1137:
  1408  05D5  1FF9               	btfss	___lwmod@divisor+1,7
  1409  05D6  2DD8               	goto	u431
  1410  05D7  2DD9               	goto	u430
  1411  05D8                     u431:
  1412  05D8  2DCA               	goto	l1133
  1413  05D9                     u430:
  1414  05D9                     l1139:
  1415  05D9  0879               	movf	___lwmod@divisor+1,w
  1416  05DA  027B               	subwf	___lwmod@dividend+1,w
  1417  05DB  1D03               	skipz
  1418  05DC  2DDF               	goto	u445
  1419  05DD  0878               	movf	___lwmod@divisor,w
  1420  05DE  027A               	subwf	___lwmod@dividend,w
  1421  05DF                     u445:
  1422  05DF  1C03               	skipc
  1423  05E0  2DE2               	goto	u441
  1424  05E1  2DE3               	goto	u440
  1425  05E2                     u441:
  1426  05E2  2DE9               	goto	l1143
  1427  05E3                     u440:
  1428  05E3                     l1141:
  1429  05E3  0878               	movf	___lwmod@divisor,w
  1430  05E4  02FA               	subwf	___lwmod@dividend,f
  1431  05E5  0879               	movf	___lwmod@divisor+1,w
  1432  05E6  1C03               	skipc
  1433  05E7  03FB               	decf	___lwmod@dividend+1,f
  1434  05E8  02FB               	subwf	___lwmod@dividend+1,f
  1435  05E9                     l1143:
  1436  05E9  3001               	movlw	1
  1437  05EA                     u455:
  1438  05EA  1003               	clrc
  1439  05EB  0CF9               	rrf	___lwmod@divisor+1,f
  1440  05EC  0CF8               	rrf	___lwmod@divisor,f
  1441  05ED  3EFF               	addlw	-1
  1442  05EE  1D03               	skipz
  1443  05EF  2DEA               	goto	u455
  1444  05F0                     l1145:
  1445  05F0  3001               	movlw	1
  1446  05F1  02FD               	subwf	___lwmod@counter,f
  1447  05F2  1D03               	btfss	3,2
  1448  05F3  2DF5               	goto	u461
  1449  05F4  2DF6               	goto	u460
  1450  05F5                     u461:
  1451  05F5  2DD9               	goto	l1139
  1452  05F6                     u460:
  1453  05F6                     l1147:
  1454  05F6  087B               	movf	___lwmod@dividend+1,w
  1455  05F7  00F9               	movwf	?___lwmod+1
  1456  05F8  087A               	movf	___lwmod@dividend,w
  1457  05F9  00F8               	movwf	?___lwmod
  1458  05FA                     l547:
  1459  05FA  0008               	return
  1460  05FB                     __end_of___lwmod:
  1461                           
  1462                           	psect	text3
  1463  05FB                     __ptext3:	
  1464 ;; *************** function ___lwdiv *****************
  1465 ;; Defined at:
  1466 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  divisor         2    0[COMMON] unsigned int 
  1469 ;;  dividend        2    2[COMMON] unsigned int 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  quotient        2    5[COMMON] unsigned int 
  1472 ;;  counter         1    7[COMMON] unsigned char 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  2    0[COMMON] unsigned int 
  1475 ;; Registers used:
  1476 ;;		wreg, status,2, status,0
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1482 ;;      Params:         4       0       0       0       0
  1483 ;;      Locals:         3       0       0       0       0
  1484 ;;      Temps:          1       0       0       0       0
  1485 ;;      Totals:         8       0       0       0       0
  1486 ;;Total ram usage:        8 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; This function calls:
  1489 ;;		Nothing
  1490 ;; This function is called by:
  1491 ;;		_sprintf
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           
  1496                           ;psect for function ___lwdiv
  1497  05FB                     ___lwdiv:
  1498  05FB                     l1103:	
  1499                           ;incstack = 0
  1500                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1501                           
  1502  05FB  01F5               	clrf	___lwdiv@quotient
  1503  05FC  01F6               	clrf	___lwdiv@quotient+1
  1504  05FD                     l1105:
  1505  05FD  0870               	movf	___lwdiv@divisor,w
  1506  05FE  0471               	iorwf	___lwdiv@divisor+1,w
  1507  05FF  1903               	btfsc	3,2
  1508  0600  2E02               	goto	u341
  1509  0601  2E03               	goto	u340
  1510  0602                     u341:
  1511  0602  2E3A               	goto	l1125
  1512  0603                     u340:
  1513  0603                     l1107:
  1514  0603  01F7               	clrf	___lwdiv@counter
  1515  0604  0AF7               	incf	___lwdiv@counter,f
  1516  0605  2E11               	goto	l1113
  1517  0606                     l1109:
  1518  0606  3001               	movlw	1
  1519  0607                     u355:
  1520  0607  1003               	clrc
  1521  0608  0DF0               	rlf	___lwdiv@divisor,f
  1522  0609  0DF1               	rlf	___lwdiv@divisor+1,f
  1523  060A  3EFF               	addlw	-1
  1524  060B  1D03               	skipz
  1525  060C  2E07               	goto	u355
  1526  060D                     l1111:
  1527  060D  3001               	movlw	1
  1528  060E  00F4               	movwf	??___lwdiv
  1529  060F  0874               	movf	??___lwdiv,w
  1530  0610  07F7               	addwf	___lwdiv@counter,f
  1531  0611                     l1113:
  1532  0611  1FF1               	btfss	___lwdiv@divisor+1,7
  1533  0612  2E14               	goto	u361
  1534  0613  2E15               	goto	u360
  1535  0614                     u361:
  1536  0614  2E06               	goto	l1109
  1537  0615                     u360:
  1538  0615                     l1115:
  1539  0615  3001               	movlw	1
  1540  0616                     u375:
  1541  0616  1003               	clrc
  1542  0617  0DF5               	rlf	___lwdiv@quotient,f
  1543  0618  0DF6               	rlf	___lwdiv@quotient+1,f
  1544  0619  3EFF               	addlw	-1
  1545  061A  1D03               	skipz
  1546  061B  2E16               	goto	u375
  1547  061C  0871               	movf	___lwdiv@divisor+1,w
  1548  061D  0273               	subwf	___lwdiv@dividend+1,w
  1549  061E  1D03               	skipz
  1550  061F  2E22               	goto	u385
  1551  0620  0870               	movf	___lwdiv@divisor,w
  1552  0621  0272               	subwf	___lwdiv@dividend,w
  1553  0622                     u385:
  1554  0622  1C03               	skipc
  1555  0623  2E25               	goto	u381
  1556  0624  2E26               	goto	u380
  1557  0625                     u381:
  1558  0625  2E2D               	goto	l1121
  1559  0626                     u380:
  1560  0626                     l1117:
  1561  0626  0870               	movf	___lwdiv@divisor,w
  1562  0627  02F2               	subwf	___lwdiv@dividend,f
  1563  0628  0871               	movf	___lwdiv@divisor+1,w
  1564  0629  1C03               	skipc
  1565  062A  03F3               	decf	___lwdiv@dividend+1,f
  1566  062B  02F3               	subwf	___lwdiv@dividend+1,f
  1567  062C                     l1119:
  1568  062C  1475               	bsf	___lwdiv@quotient,0
  1569  062D                     l1121:
  1570  062D  3001               	movlw	1
  1571  062E                     u395:
  1572  062E  1003               	clrc
  1573  062F  0CF1               	rrf	___lwdiv@divisor+1,f
  1574  0630  0CF0               	rrf	___lwdiv@divisor,f
  1575  0631  3EFF               	addlw	-1
  1576  0632  1D03               	skipz
  1577  0633  2E2E               	goto	u395
  1578  0634                     l1123:
  1579  0634  3001               	movlw	1
  1580  0635  02F7               	subwf	___lwdiv@counter,f
  1581  0636  1D03               	btfss	3,2
  1582  0637  2E39               	goto	u401
  1583  0638  2E3A               	goto	u400
  1584  0639                     u401:
  1585  0639  2E15               	goto	l1115
  1586  063A                     u400:
  1587  063A                     l1125:
  1588  063A  0876               	movf	___lwdiv@quotient+1,w
  1589  063B  00F1               	movwf	?___lwdiv+1
  1590  063C  0875               	movf	___lwdiv@quotient,w
  1591  063D  00F0               	movwf	?___lwdiv
  1592  063E                     l537:
  1593  063E  0008               	return
  1594  063F                     __end_of___lwdiv:
  1595                           
  1596                           	psect	text4
  1597  0528                     __ptext4:	
  1598 ;; *************** function _spiWrite *****************
  1599 ;; Defined at:
  1600 ;;		line 34 in file "SPI.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  dat             1    wreg     unsigned char 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  dat             1    0[COMMON] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1614 ;;      Params:         0       0       0       0       0
  1615 ;;      Locals:         1       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0
  1617 ;;      Totals:         1       0       0       0       0
  1618 ;;Total ram usage:        1 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           
  1628                           ;psect for function _spiWrite
  1629  0528                     _spiWrite:
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _spiWrite: [wreg]
  1633                           ;spiWrite@dat stored from wreg
  1634  0528  00F0               	movwf	spiWrite@dat
  1635  0529                     l1271:
  1636                           
  1637                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  1638  0529  0870               	movf	spiWrite@dat,w
  1639  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1640  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1641  052C  0093               	movwf	19	;volatile
  1642  052D                     l102:
  1643  052D  0008               	return
  1644  052E                     __end_of_spiWrite:
  1645                           
  1646                           	psect	text5
  1647  053D                     __ptext5:	
  1648 ;; *************** function _spiRead *****************
  1649 ;; Defined at:
  1650 ;;		line 47 in file "SPI.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      unsigned char 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, pclath, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1664 ;;      Params:         0       0       0       0       0
  1665 ;;      Locals:         0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0
  1667 ;;      Totals:         0       0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    1
  1671 ;; This function calls:
  1672 ;;		_spiReceiveWait
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           
  1679                           ;psect for function _spiRead
  1680  053D                     _spiRead:
  1681  053D                     l1273:	
  1682                           ;incstack = 0
  1683                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1684                           
  1685                           
  1686                           ;SPI.c: 49:     spiReceiveWait();
  1687  053D  120A  118A  252E  120A  118A  	fcall	_spiReceiveWait
  1688  0542                     l1275:
  1689                           
  1690                           ;SPI.c: 50:     return(SSPBUF);
  1691  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1692  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1693  0544  0813               	movf	19,w	;volatile
  1694  0545                     l110:
  1695  0545  0008               	return
  1696  0546                     __end_of_spiRead:
  1697                           
  1698                           	psect	text6
  1699  052E                     __ptext6:	
  1700 ;; *************** function _spiReceiveWait *****************
  1701 ;; Defined at:
  1702 ;;		line 29 in file "SPI.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		None
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1716 ;;      Params:         0       0       0       0       0
  1717 ;;      Locals:         0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0
  1719 ;;      Totals:         0       0       0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_spiRead
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           
  1730                           ;psect for function _spiReceiveWait
  1731  052E                     _spiReceiveWait:
  1732  052E                     l1097:	
  1733                           ;incstack = 0
  1734                           ; Regs used in _spiReceiveWait: []
  1735                           
  1736  052E                     l96:	
  1737                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  1738                           
  1739  052E  1683               	bsf	3,5	;RP0=1, select bank1
  1740  052F  1303               	bcf	3,6	;RP1=0, select bank1
  1741  0530  1C14               	btfss	20,0	;volatile
  1742  0531  2D33               	goto	u311
  1743  0532  2D34               	goto	u310
  1744  0533                     u311:
  1745  0533  2D2E               	goto	l96
  1746  0534                     u310:
  1747  0534                     l99:
  1748  0534  0008               	return
  1749  0535                     __end_of_spiReceiveWait:
  1750                           
  1751                           	psect	text7
  1752  058B                     __ptext7:	
  1753 ;; *************** function _setup *****************
  1754 ;; Defined at:
  1755 ;;		line 112 in file "lab3master.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0
  1772 ;;      Totals:         0       0       0       0       0
  1773 ;;Total ram usage:        0 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    1
  1776 ;; This function calls:
  1777 ;;		_spiInit
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function _setup
  1785  058B                     _setup:
  1786  058B                     l1151:	
  1787                           ;incstack = 0
  1788                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1789                           
  1790                           
  1791                           ;lab3master.c: 115:     OSCCONbits.IRCF = 7;
  1792  058B  3070               	movlw	112
  1793  058C  1683               	bsf	3,5	;RP0=1, select bank1
  1794  058D  1303               	bcf	3,6	;RP1=0, select bank1
  1795  058E  048F               	iorwf	15,f	;volatile
  1796  058F                     l1153:
  1797                           
  1798                           ;lab3master.c: 116:     OSCCONbits.SCS = 1;
  1799  058F  140F               	bsf	15,0	;volatile
  1800  0590                     l1155:
  1801                           
  1802                           ;lab3master.c: 118:     ANSELH = 0;
  1803  0590  1683               	bsf	3,5	;RP0=1, select bank3
  1804  0591  1703               	bsf	3,6	;RP1=1, select bank3
  1805  0592  0189               	clrf	9	;volatile
  1806  0593                     l1157:
  1807                           
  1808                           ;lab3master.c: 119:     TRISA = 0;
  1809  0593  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0594  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0595  0185               	clrf	5	;volatile
  1812  0596                     l1159:
  1813                           
  1814                           ;lab3master.c: 120:     TRISB = 0;
  1815  0596  0186               	clrf	6	;volatile
  1816  0597                     l1161:
  1817                           
  1818                           ;lab3master.c: 121:     TRISC = 144;
  1819  0597  3090               	movlw	144
  1820  0598  0087               	movwf	7	;volatile
  1821  0599                     l1163:
  1822                           
  1823                           ;lab3master.c: 122:     TRISD = 0;
  1824  0599  0188               	clrf	8	;volatile
  1825  059A                     l1165:
  1826                           
  1827                           ;lab3master.c: 123:     PORTA = 0;
  1828  059A  1283               	bcf	3,5	;RP0=0, select bank0
  1829  059B  1303               	bcf	3,6	;RP1=0, select bank0
  1830  059C  0185               	clrf	5	;volatile
  1831  059D                     l1167:
  1832                           
  1833                           ;lab3master.c: 124:     PORTB = 0;
  1834  059D  0186               	clrf	6	;volatile
  1835  059E                     l1169:
  1836                           
  1837                           ;lab3master.c: 125:     PORTC = 0;
  1838  059E  0187               	clrf	7	;volatile
  1839  059F                     l1171:
  1840                           
  1841                           ;lab3master.c: 126:     PORTD = 0;
  1842  059F  0188               	clrf	8	;volatile
  1843  05A0                     l1173:
  1844                           
  1845                           ;lab3master.c: 127:     PORTCbits.RC2 = 1;
  1846  05A0  1507               	bsf	7,2	;volatile
  1847  05A1                     l1175:
  1848                           
  1849                           ;lab3master.c: 129:     TXSTAbits.SYNC = 0;
  1850  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  1851  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  1852  05A3  1218               	bcf	24,4	;volatile
  1853  05A4                     l1177:
  1854                           
  1855                           ;lab3master.c: 130:     TXSTAbits.BRGH = 1;
  1856  05A4  1518               	bsf	24,2	;volatile
  1857  05A5                     l1179:
  1858                           
  1859                           ;lab3master.c: 132:     BAUDCTLbits.BRG16 = 1;
  1860  05A5  1683               	bsf	3,5	;RP0=1, select bank3
  1861  05A6  1703               	bsf	3,6	;RP1=1, select bank3
  1862  05A7  1587               	bsf	7,3	;volatile
  1863  05A8                     l1181:
  1864                           
  1865                           ;lab3master.c: 134:     SPBRG = 207;
  1866  05A8  30CF               	movlw	207
  1867  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  1868  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  1869  05AB  0099               	movwf	25	;volatile
  1870  05AC                     l1183:
  1871                           
  1872                           ;lab3master.c: 135:     SPBRGH = 0;
  1873  05AC  019A               	clrf	26	;volatile
  1874  05AD                     l1185:
  1875                           
  1876                           ;lab3master.c: 137:     RCSTAbits.SPEN = 1;
  1877  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1878  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1879  05AF  1798               	bsf	24,7	;volatile
  1880  05B0                     l1187:
  1881                           
  1882                           ;lab3master.c: 138:     RCSTAbits.RX9 = 0;
  1883  05B0  1318               	bcf	24,6	;volatile
  1884  05B1                     l1189:
  1885                           
  1886                           ;lab3master.c: 139:     RCSTAbits.CREN = 1;
  1887  05B1  1618               	bsf	24,4	;volatile
  1888  05B2                     l1191:
  1889                           
  1890                           ;lab3master.c: 141:     TXSTAbits.TXEN = 1;
  1891  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  1892  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  1893  05B4  1698               	bsf	24,5	;volatile
  1894  05B5                     l1193:
  1895                           
  1896                           ;lab3master.c: 143:     INTCONbits.GIE = 1;
  1897  05B5  178B               	bsf	11,7	;volatile
  1898  05B6                     l1195:
  1899                           
  1900                           ;lab3master.c: 144:     INTCONbits.PEIE = 1;
  1901  05B6  170B               	bsf	11,6	;volatile
  1902  05B7                     l1197:
  1903                           
  1904                           ;lab3master.c: 145:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_I
      +                          DLE_LOW, SPI_IDLE_2_ACTIVE);
  1905  05B7  01F0               	clrf	spiInit@sDataSample
  1906  05B8  01F1               	clrf	spiInit@sClockIdle
  1907  05B9  01F2               	clrf	spiInit@sTransmitEdge
  1908  05BA  3020               	movlw	32
  1909  05BB  120A  118A  2556  120A  118A  	fcall	_spiInit
  1910  05C0                     l76:
  1911  05C0  0008               	return
  1912  05C1                     __end_of_setup:
  1913                           
  1914                           	psect	text8
  1915  0556                     __ptext8:	
  1916 ;; *************** function _spiInit *****************
  1917 ;; Defined at:
  1918 ;;		line 12 in file "SPI.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  sType           1    wreg     enum E1264
  1921 ;;  sDataSample     1    0[COMMON] enum E1272
  1922 ;;  sClockIdle      1    1[COMMON] enum E1276
  1923 ;;  sTransmitEdg    1    2[COMMON] enum E1280
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;  sType           1    3[COMMON] enum E1264
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2, status,0
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         3       0       0       0       0
  1936 ;;      Locals:         1       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0
  1938 ;;      Totals:         4       0       0       0       0
  1939 ;;Total ram usage:        4 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		_setup
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           
  1949                           ;psect for function _spiInit
  1950  0556                     _spiInit:
  1951                           
  1952                           ;incstack = 0
  1953                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1954                           ;spiInit@sType stored from wreg
  1955  0556  00F3               	movwf	spiInit@sType
  1956  0557                     l1087:
  1957                           
  1958                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  1959  0557  1683               	bsf	3,5	;RP0=1, select bank1
  1960  0558  1303               	bcf	3,6	;RP1=0, select bank1
  1961  0559  1287               	bcf	7,5	;volatile
  1962                           
  1963                           ;SPI.c: 15:     if(sType & 0b00000100)
  1964  055A  1D73               	btfss	spiInit@sType,2
  1965  055B  2D5D               	goto	u301
  1966  055C  2D5E               	goto	u300
  1967  055D                     u301:
  1968  055D  2D62               	goto	l1093
  1969  055E                     u300:
  1970  055E                     l1089:
  1971                           
  1972                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  1973  055E  0872               	movf	spiInit@sTransmitEdge,w
  1974  055F  0094               	movwf	20	;volatile
  1975  0560                     l1091:
  1976                           
  1977                           ;SPI.c: 18:         TRISC3 = 1;
  1978  0560  1587               	bsf	7,3	;volatile
  1979                           
  1980                           ;SPI.c: 19:     }
  1981  0561  2D66               	goto	l92
  1982  0562                     l1093:
  1983                           
  1984                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  1985  0562  0870               	movf	spiInit@sDataSample,w
  1986  0563  0472               	iorwf	spiInit@sTransmitEdge,w
  1987  0564  0094               	movwf	20	;volatile
  1988  0565                     l1095:
  1989                           
  1990                           ;SPI.c: 23:         TRISC3 = 0;
  1991  0565  1187               	bcf	7,3	;volatile
  1992  0566                     l92:	
  1993                           ;SPI.c: 24:     }
  1994                           
  1995                           
  1996                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  1997  0566  0873               	movf	spiInit@sType,w
  1998  0567  0471               	iorwf	spiInit@sClockIdle,w
  1999  0568  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0569  1303               	bcf	3,6	;RP1=0, select bank0
  2001  056A  0094               	movwf	20	;volatile
  2002  056B                     l93:
  2003  056B  0008               	return
  2004  056C                     __end_of_spiInit:
  2005                           
  2006                           	psect	text9
  2007  056C                     __ptext9:	
  2008 ;; *************** function _enviocadena *****************
  2009 ;; Defined at:
  2010 ;;		line 44 in file "usart.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  cadena          1    wreg     PTR unsigned char 
  2013 ;;		 -> term(16), 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  cadena          1    2[COMMON] PTR unsigned char 
  2016 ;;		 -> term(16), 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         0       0       0       0       0
  2027 ;;      Locals:         1       0       0       0       0
  2028 ;;      Temps:          1       0       0       0       0
  2029 ;;      Totals:         2       0       0       0       0
  2030 ;;Total ram usage:        2 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    1
  2033 ;; This function calls:
  2034 ;;		_enviocaracter
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _enviocadena
  2042  056C                     _enviocadena:
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _enviocadena: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2046                           ;enviocadena@cadena stored from wreg
  2047  056C  00F2               	movwf	enviocadena@cadena
  2048  056D                     l1261:
  2049                           
  2050                           ;usart.c: 45:     while (*cadena != 0){
  2051  056D  2D7A               	goto	l1267
  2052  056E                     l1263:
  2053                           
  2054                           ;usart.c: 46:       enviocaracter(*cadena);
  2055  056E  0872               	movf	enviocadena@cadena,w
  2056  056F  0084               	movwf	4
  2057  0570  0800               	movf	0,w
  2058  0571  120A  118A  2546  120A  118A  	fcall	_enviocaracter
  2059  0576                     l1265:
  2060                           
  2061                           ;usart.c: 47:       cadena++;
  2062  0576  3001               	movlw	1
  2063  0577  00F1               	movwf	??_enviocadena
  2064  0578  0871               	movf	??_enviocadena,w
  2065  0579  07F2               	addwf	enviocadena@cadena,f
  2066  057A                     l1267:
  2067                           
  2068                           ;usart.c: 45:     while (*cadena != 0){
  2069  057A  0872               	movf	enviocadena@cadena,w
  2070  057B  0084               	movwf	4
  2071  057C  1383               	bcf	3,7	;select IRP bank0
  2072  057D  0800               	movf	0,w
  2073  057E  1D03               	btfss	3,2
  2074  057F  2D81               	goto	u541
  2075  0580  2D82               	goto	u540
  2076  0581                     u541:
  2077  0581  2D6E               	goto	l1263
  2078  0582                     u540:
  2079  0582                     l149:
  2080                           
  2081                           ;usart.c: 49:     if (PIR1bits.TXIF){
  2082  0582  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0583  1303               	bcf	3,6	;RP1=0, select bank0
  2084  0584  1E0C               	btfss	12,4	;volatile
  2085  0585  2D87               	goto	u551
  2086  0586  2D88               	goto	u550
  2087  0587                     u551:
  2088  0587  2D8A               	goto	l151
  2089  0588                     u550:
  2090  0588                     l1269:
  2091                           
  2092                           ;usart.c: 50:             TXREG = 13;
  2093  0588  300D               	movlw	13
  2094  0589  0099               	movwf	25	;volatile
  2095  058A                     l151:
  2096  058A  0008               	return
  2097  058B                     __end_of_enviocadena:
  2098                           
  2099                           	psect	text10
  2100  0546                     __ptext10:	
  2101 ;; *************** function _enviocaracter *****************
  2102 ;; Defined at:
  2103 ;;		line 35 in file "usart.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  a               1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  a               1    0[COMMON] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2117 ;;      Params:         0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0
  2120 ;;      Totals:         1       0       0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_enviocadena
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           
  2131                           ;psect for function _enviocaracter
  2132  0546                     _enviocaracter:
  2133                           
  2134                           ;incstack = 0
  2135                           ; Regs used in _enviocaracter: [wreg]
  2136                           ;enviocaracter@a stored from wreg
  2137  0546  00F0               	movwf	enviocaracter@a
  2138  0547                     l1099:
  2139  0547                     l140:	
  2140                           ;usart.c: 38:     }
  2141                           
  2142                           
  2143                           ;usart.c: 36:     while (TXSTAbits.TRMT == 0){
  2144  0547  1683               	bsf	3,5	;RP0=1, select bank1
  2145  0548  1303               	bcf	3,6	;RP1=0, select bank1
  2146  0549  1C98               	btfss	24,1	;volatile
  2147  054A  2D4C               	goto	u321
  2148  054B  2D4D               	goto	u320
  2149  054C                     u321:
  2150  054C  2D47               	goto	l140
  2151  054D                     u320:
  2152  054D                     l142:
  2153                           
  2154                           ;usart.c: 39:     if (PIR1bits.TXIF){
  2155  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2156  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2157  054F  1E0C               	btfss	12,4	;volatile
  2158  0550  2D52               	goto	u331
  2159  0551  2D53               	goto	u330
  2160  0552                     u331:
  2161  0552  2D55               	goto	l144
  2162  0553                     u330:
  2163  0553                     l1101:
  2164                           
  2165                           ;usart.c: 40:             TXREG = a;
  2166  0553  0870               	movf	enviocaracter@a,w
  2167  0554  0099               	movwf	25	;volatile
  2168  0555                     l144:
  2169  0555  0008               	return
  2170  0556                     __end_of_enviocaracter:
  2171  007E                     btemp	set	126	;btemp
  2172  007E                     wtemp0	set	126
  2173                           
  2174                           	psect	config
  2175                           
  2176                           ;Config register CONFIG1 @ 0x2007
  2177                           ;	Oscillator Selection bits
  2178                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2179                           ;	Watchdog Timer Enable bit
  2180                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2181                           ;	Power-up Timer Enable bit
  2182                           ;	PWRTE = OFF, PWRT disabled
  2183                           ;	RE3/MCLR pin function select bit
  2184                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2185                           ;	Code Protection bit
  2186                           ;	CP = OFF, Program memory code protection is disabled
  2187                           ;	Data Code Protection bit
  2188                           ;	CPD = OFF, Data memory code protection is disabled
  2189                           ;	Brown Out Reset Selection bits
  2190                           ;	BOREN = OFF, BOR disabled
  2191                           ;	Internal External Switchover bit
  2192                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2193                           ;	Fail-Safe Clock Monitor Enabled bit
  2194                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2195                           ;	Low Voltage Programming Enable bit
  2196                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2197                           ;	In-Circuit Debugger Mode bit
  2198                           ;	DEBUG = 0x1, unprogrammed default
  2199  2007                     	org	8199
  2200  2007  20D4               	dw	8404
  2201                           
  2202                           ;Config register CONFIG2 @ 0x2008
  2203                           ;	Brown-out Reset Selection bit
  2204                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2205                           ;	Flash Program Memory Self Write Enable bits
  2206                           ;	WRT = OFF, Write protection off
  2207  2008                     	org	8200
  2208  2008  3FFF               	dw	16383

Data Sizes:
    Strings     27
    Constant    10
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     24      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 27
		 -> STR_1(CODE[27]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> term(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    enviocadena@cadena	PTR unsigned char  size(1) Largest target is 16
		 -> term(BANK0[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_spiInit
    _enviocadena->_enviocaracter

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1693
                                             17 BANK0      7     7      0
                        _enviocadena
                              _setup
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1211
                                              0 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _enviocadena                                          2     2      0     100
                                              1 COMMON     2     2      0
                      _enviocaracter
 ---------------------------------------------------------------------------------
 (2) _enviocaracter                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _enviocadena
     _enviocaracter
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      38       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      2A       5       52.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      38      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Aug 04 23:14:24 2021

                      pc 0002              _SSPSTATbits 0094                       l92 0566  
                     l76 05C0                       l93 056B                       l69 06CC  
                     l96 052E                       l99 0534                       _pc 0038  
                     fsr 0004                      l110 0545                      l102 052D  
                    l140 0547                      l142 054D                      l151 058A  
                    l144 0555                      l149 0582                      l261 07F2  
                    l537 063E                      l547 05FA                      u300 055E  
                    u301 055D                      u310 0534                      u311 0533  
                    u320 054D                      u400 063A                      u321 054C  
                    u401 0639                      u330 0553                      u410 05C7  
                    u331 0552                      u411 05C6                      u340 0603  
                    u500 0784                      u341 0602                      u501 0783  
                    u430 05D9                      u510 078A                      u431 05D8  
                    u511 0789                      u360 0615                      u440 05E3  
                    u520 07DC                      u361 0614                      u441 05E2  
                    u425 05CB                      u521 07DB                      u530 07EE  
                    u355 0607                      u531 07ED                      u540 0582  
                    u380 0626                      u460 05F6                      u541 0581  
                    u381 0625                      u461 05F5                      u445 05DF  
                    u550 0588                      u470 0719                      u551 0587  
                    u375 0616                      u455 05EA                      u471 0718  
                    u607 06C1                      u480 0753                      u560 0673  
                    u385 0622                      u481 0752                      u617 06D3  
                    u561 0672                      u490 0779                      u570 0691  
                    u395 062E                      u491 0778                      u627 06ED  
                    u571 0690                      u637 06FC                      u495 0775  
                    u587 0698                      u597 06B2                      fsr0 0004  
                    indf 0000                     l1101 0553                     l1111 060D  
                   l1103 05FB                     l1121 062D                     l1113 0611  
                   l1105 05FD                     l1201 0713                     l1123 0634  
                   l1115 0615                     l1107 0603                     l1131 05C7  
                   l1211 0726                     l1203 0719                     l1117 0626  
                   l1109 0606                     l1125 063A                     l1141 05E3  
                   l1133 05CA                     l1221 0757                     l1213 0743  
                   l1205 0720                     l1301 0691                     l1151 058B  
                   l1119 062C                     l1143 05E9                     l1135 05D1  
                   l1223 075C                     l1215 074B                     l1207 0725  
                   l1311 06C8                     l1303 0692                     l1161 0597  
                   l1153 058F                     l1145 05F0                     l1137 05D5  
                   l1129 05C1                     l1241 0795                     l1233 077A  
                   l1217 074F                     l1321 0703                     l1313 06CD  
                   l1305 069C                     l1091 0560                     l1171 059F  
                   l1163 0599                     l1155 0590                     l1139 05D9  
                   l1147 05F6                     l1243 079A                     l1235 0784  
                   l1219 0753                     l1251 07DC                     l1315 06D7  
                   l1307 06A4                     l1261 056D                     l1093 0562  
                   l1181 05A8                     l1173 05A0                     l1165 059A  
                   l1157 0593                     l1245 07C8                     l1237 078A  
                   l1229 075E                     l1253 07EE                     l1317 06DF  
                   l1309 06B6                     l1263 056E                     l1095 0565  
                   l1087 0557                     l1191 05B2                     l1183 05AC  
                   l1175 05A1                     l1167 059D                     l1159 0596  
                   l1271 0529                     l1247 07CF                     l1239 0791  
                   l1319 06F1                     l1265 0576                     l1089 055E  
                   l1193 05B5                     l1185 05AD                     l1177 05A4  
                   l1169 059E                     l1097 052E                     l1273 053D  
                   l1249 07D3                     l1281 0644                     l1099 0547  
                   l1267 057A                     l1195 05B6                     l1187 05B0  
                   l1179 05A5                     l1275 0542                     l1291 0674  
                   l1283 0648                     l1269 0588                     l1197 05B7  
                   l1189 05B1                     l1293 0679                     l1285 0667  
                   l1199 070E                     l1367 0684                     l1287 066D  
                   l1279 063F                     l1369 0738                     l1297 067C  
                   l1299 068C                     STR_1 0013                     _main 063F  
                   _term 003A                     btemp 007E                     start 0000  
           ?_enviocadena 0070                    ?_main 0070                    _EEADR 010D  
                  _EEDAT 010C          __end_of___lwdiv 063F          __end_of___lwmod 05FB  
                  _RCREG 001A                    _SPBRG 0099                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TXREG 0019          __end_of_dpowers 0013  
                  _setup 058B   __size_of_enviocaracter 0010                    pclath 000A  
        __end_of_spiInit 056C          __end_of_spiRead 0546                    status 0003  
                  wtemp0 007E          __end_of_sprintf 07F3          __initialization 07F3  
           __end_of_main 070B                   ??_main 0031                   _EECON2 018D  
                 ?_setup 0070                   _ANSELH 0189                   _SPBRGH 009A  
                 _TRISC3 043B                   _TRISC5 043D                   _SSPCON 0014  
                 _SSPBUF 0013            _enviocaracter 0546                ??___lwdiv 0074  
              ??___lwmod 007C         __end_of_spiWrite 052E                ??_spiInit 0073  
              ??_spiRead 0070                ??_sprintf 0027  __end_of__initialization 07FC  
         __pcstackCOMMON 0070           ?_enviocaracter 0070     __size_of_enviocadena 001F  
          __end_of_setup 05C1                  ??_setup 0074               __pbssBANK0 0038  
             __pmaintext 063F  __size_of_spiReceiveWait 0007                  _SSPSTAT 0094  
         enviocaracter@a 0070               __stringtab 0003          ??_enviocaracter 0070  
              ?_spiWrite 0070                  ___lwdiv 05FB                  ___lwmod 05C1  
                __ptext1 070B                  __ptext2 05C1                  __ptext3 05FB  
                __ptext4 0528                  __ptext5 053D                  __ptext6 052E  
                __ptext7 058B                  __ptext8 0556                  __ptext9 056C  
                _dpowers 0009                  _spiInit 0556                  _spiRead 053D  
                _sprintf 070B                  clrloop0 0536     end_of_initialization 07FC  
              _RCSTAbits 0018               ??_spiWrite 0070                _PORTCbits 0007  
            spiWrite@dat 0070                _TXSTAbits 0098           _spiReceiveWait 052E  
            _BAUDCTLbits 0187      start_initialization 07F3            ??_enviocadena 0071  
 __end_of_spiReceiveWait 0535                ___latbits 0002            __pcstackBANK0 0020  
            sprintf@flag 002B              sprintf@prec 002C         ___lwdiv@dividend 0072  
        ?_spiReceiveWait 0070                 ?___lwdiv 0070                 ?___lwmod 0078  
      __size_of_spiWrite 0006      __end_of_enviocadena 058B                __pstrings 0003  
               ?_spiInit 0070                 ?_spiRead 0070         ___lwdiv@quotient 0075  
              _dummydata 0039                 ?_sprintf 0020           __size_of_setup 0036  
   spiInit@sTransmitEdge 0072                clear_ram0 0535       spiInit@sDataSample 0070  
               _PIR1bits 000C                 _PIR2bits 000D    __end_of_enviocaracter 0556  
            __stringbase 0008        enviocadena@cadena 0072               _EECON1bits 018C  
            _enviocadena 056C         __size_of___lwdiv 0044         __size_of___lwmod 003A  
     __end_of__stringtab 0009               sprintf@val 002D          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 __ptext10 0546         __size_of_spiInit 0016  
       __size_of_spiRead 0009         __size_of_sprintf 00E8            __size_of_main 00CC  
               _spiWrite 0528             spiInit@sType 0073        spiInit@sClockIdle 0071  
             _INTCONbits 000B                sprintf@ap 002A                sprintf@sp 002F  
       ___lwmod@dividend 007A         ??_spiReceiveWait 0070                stringcode 0003  
             _OSCCONbits 008F                 sprintf@c 0030                 sprintf@f 0020  
        ___lwmod@divisor 0078          ___lwmod@counter 007D                 stringdir 0003  
               stringtab 0003  
